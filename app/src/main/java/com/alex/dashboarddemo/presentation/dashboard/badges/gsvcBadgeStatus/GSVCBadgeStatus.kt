package com.alex.dashboarddemo.presentation.dashboard.badges.gsvcBadgeStatusimport androidx.compose.foundation.layout.*import androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.material.Cardimport androidx.compose.material.Textimport androidx.compose.runtime.Composableimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.text.TextStyleimport androidx.compose.ui.text.font.FontWeightimport androidx.compose.ui.text.style.TextOverflowimport androidx.compose.ui.tooling.preview.Previewimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport com.alex.dashboarddemo.ui.theme.GSVCAlert100import com.alex.dashboarddemo.ui.theme.GSVCAmountText100Centerimport com.alex.dashboarddemo.ui.theme.GSVCHelper3Text100Centerimport com.alex.dashboarddemo.ui.theme.GSVCInfo100import com.alex.dashboarddemo.ui.theme.GSVCRedimport com.alex.dashboarddemo.ui.theme.GSVCTitleBase100Leftimport com.alex.dashboarddemo.ui.theme.GSVCTitleText100Centerimport com.alex.dashboarddemo.ui.theme.SDAColor.GSVCSuccess100import com.alex.dashboarddemo.ui.theme.SDAColor.GSVCSuccess200import com.alex.dashboarddemo.ui.theme.h5import com.alex.dashboarddemo.ui.theme.subtitle1data class GSVCBadgesStatusModel(    val badgesStatusText: String = "",    val textStyleBadgeStatus: TextStyle = GSVCHelper3Text100Center,    val backgroundBadgesStatus: Color = GSVCSuccess200,    val roundedCornerShape: RoundedCornerShape = RoundedCornerShape(0.dp, 0.dp, 0.dp, 0.dp),    val modifier: Modifier = Modifier.wrapContentSize().padding(4.dp))@Composablefun GSVCBadgesStatus(    gsvcBadgesStatusModel: GSVCBadgesStatusModel) {    Card(        modifier = gsvcBadgesStatusModel.modifier,        shape = gsvcBadgesStatusModel.roundedCornerShape,        backgroundColor = gsvcBadgesStatusModel.backgroundBadgesStatus    ) {        Text(            modifier = Modifier.padding(8.dp, 4.dp),            style = gsvcBadgesStatusModel.textStyleBadgeStatus,            text = gsvcBadgesStatusModel.badgesStatusText,            maxLines = 1,            overflow = TextOverflow.Ellipsis        )    }}@Preview(showBackground = true)@Composablefun GSVCBadgesStatusPreviewAllDemo1() {    Column(        modifier = Modifier.fillMaxSize(),        horizontalAlignment = Alignment.CenterHorizontally,        verticalArrangement = Arrangement.Center    ) {        Text(            text = "Demo de Badges Status",            style = GSVCTitleBase100Left,            fontSize = 16.sp,            color = Color.Black,            fontWeight = FontWeight.Bold        )        Spacer(modifier = Modifier.height(32.dp))        GSVCBadgesStatusModel(            badgesStatusText = "Aceptada",            backgroundBadgesStatus = GSVCSuccess100,            textStyleBadgeStatus = subtitle1,            roundedCornerShape = RoundedCornerShape(0.dp, 8.dp, 0.dp, 8.dp)        ).apply { GSVCBadgesStatus(this) }        Spacer(modifier = Modifier.height(32.dp))        GSVCBadgesStatusModel(            badgesStatusText = "Pendiente",            backgroundBadgesStatus = GSVCInfo100,            textStyleBadgeStatus = h5,            roundedCornerShape = RoundedCornerShape(8.dp, 0.dp, 8.dp, 0.dp)        ).apply { GSVCBadgesStatus(this) }        Spacer(modifier = Modifier.height(32.dp))        GSVCBadgesStatusModel(            badgesStatusText = "Status Informativo ",            backgroundBadgesStatus = GSVCAlert100,            textStyleBadgeStatus = GSVCTitleText100Center,            roundedCornerShape = RoundedCornerShape(16.dp, 8.dp, 32.dp, 0.dp)        ).apply { GSVCBadgesStatus(this) }        Spacer(modifier = Modifier.height(32.dp))        GSVCBadgesStatusModel(            badgesStatusText = "Status Informativo",            backgroundBadgesStatus = GSVCRed,            textStyleBadgeStatus = GSVCAmountText100Center,            roundedCornerShape = RoundedCornerShape(64.dp, 8.dp, 0.dp, 64.dp)        ).apply { GSVCBadgesStatus(this) }    }}