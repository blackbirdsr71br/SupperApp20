package com.alex.dashboarddemo.presentation.dashboardimport androidx.compose.foundation.Imageimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.clickableimport androidx.compose.foundation.layout.*import androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.material.Textimport androidx.compose.runtime.Composableimport androidx.compose.runtime.LaunchedEffectimport androidx.compose.runtime.getValueimport androidx.compose.runtime.mutableStateOfimport androidx.compose.runtime.saveable.rememberSaveableimport androidx.compose.runtime.setValueimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.res.painterResourceimport androidx.compose.ui.tooling.preview.Previewimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport com.alex.dashboarddemo.Rimport com.alex.dashboarddemo.ui.theme.GSVCBody1Base100Leftimport com.alex.dashboarddemo.ui.theme.GSVCButtonText100Leftimport com.alex.dashboarddemo.ui.theme.GSVCPrimary100import com.alex.dashboarddemo.ui.theme.GSVCTitleText100Rightdata class GSDACAccountModel(    val modifier: Modifier = Modifier,    val titleText: String = "Tienes Dispponible",    val balanceAmount: String = "1,000.00",    val doubleDin: Boolean = false,)@Composablefun GSDACCAccounts(    model: GSDACAccountModel,) {    var viewBalance by rememberSaveable { mutableStateOf(false) }    val balanceAmount = model.balanceAmount    val balanceCard = if (viewBalance) balanceAmount else "$•••"    var viewBalanceTimer by rememberSaveable { mutableStateOf(false) }    LaunchedEffect(viewBalance) {        if (!viewBalance) {            viewBalanceTimer = false            viewBalance = false        }    }    Column(        modifier = Modifier            .padding(horizontal = 8.dp),    ) {        Box(            modifier = Modifier                .fillMaxWidth()                .height(if (model.doubleDin) 250.dp else 120.dp)                .background(                    color = Color.White,                    shape = RoundedCornerShape(10.dp),                ),        ) {            Column {                Row(                    modifier = Modifier                        .padding(start = 12.dp, top = 16.dp, end = 16.dp),                ) {                    Text(                        text = model.titleText,                        color = Color.Black,                        style = GSVCBody1Base100Left,                        fontSize = 12.sp,                    )                }                Row(                    modifier = Modifier.padding(start = 12.dp, top = 8.dp),                ) {                    Text(                        text = balanceCard,                        color = Color.Black,                        style = GSVCTitleText100Right,                    )                    val image =                        if (viewBalance) {                            painterResource(id = R.drawable.open_eye)                        } else {                            painterResource(id = R.drawable.close_eye)                        }                    Spacer(modifier = Modifier.width(8.dp))                    Image(                        painter = image,                        contentDescription = "hidden",                        modifier = Modifier                            .align(Alignment.CenterVertically)                            .padding(bottom = 8.dp)                            .clickable {                                if (!viewBalance) {                                    if (viewBalanceTimer) {                                        viewBalance = true                                    } else {                                        /*callFrameworkFromLauncher(                                            GSINFrameworksCatalog.FW_SECURITY_KEY,                                            "",                                            securityLauncher,                                        )*/                                        viewBalance = true                                    }                                } else {                                    viewBalance = false                                    // GSPMTaggingPayments().tagShowBalance("saldo_off", "")                                }                            },                    )                }                Box(                    Modifier                        .weight(1F)                        .padding(start = 16.dp, bottom = 12.dp),                    contentAlignment = Alignment.BottomStart,                ) {                    Text(                        text = "Ir a cuentas",                        color = GSVCPrimary100,                        style = GSVCButtonText100Left,                    )                }            }        }    }}@Preview(showBackground = true, backgroundColor = 0xFF0C0623)@Composablefun VerControl() {    Box(        modifier = Modifier.fillMaxWidth()            .background(Color(0xFFEBEBEB)),    ) {        val model = GSDACAccountModel()        Box(            modifier = Modifier                .width(250.dp)                .padding(16.dp),        ) {            GSDACCAccounts(model)        }    }}@Preview(showBackground = true, backgroundColor = 0xFF0C0623)@Composablefun VerControl1() {    Box(        modifier = Modifier.fillMaxWidth()            .background(Color(0xFFEBEBEB)),    ) {        val model = GSDACAccountModel(            doubleDin = true,        )        Box(            modifier = Modifier                .width(250.dp)                .padding(16.dp),        ) {            GSDACCAccounts(model)        }    }}